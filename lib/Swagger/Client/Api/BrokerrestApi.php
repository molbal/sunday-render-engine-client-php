<?php
/**
 * BrokerrestApi
 * PHP version 5
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sunday Archive Service
 *
 * Sunday Archive Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Sunday\ArchiveClient\Configuration;
use \Sunday\ArchiveClient\ApiClient;
use \Sunday\ArchiveClient\ApiException;
use \Sunday\ArchiveClient\ObjectSerializer;

/**
 * BrokerrestApi Class Doc Comment
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BrokerrestApi
{

    /**
     * API Client
     *
     * @var \Sunday\ArchiveClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Sunday\ArchiveClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Sunday\ArchiveClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://136.144.173.90:8008/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Sunday\ArchiveClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Sunday\ArchiveClient\ApiClient $apiClient set the API client
     *
     * @return BrokerrestApi
     */
    public function setApiClient(\Sunday\ArchiveClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createBrokerUsingPOST
     *
     * Elmenti az új üzletkötőt.
     *
     * @param \Swagger\Client\Model\BrokerEntity $entity entity (required)
     * @return \Swagger\Client\Model\BrokerEntity
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function createBrokerUsingPOST($entity)
    {
        list($response) = $this->createBrokerUsingPOSTWithHttpInfo($entity);
        return $response;
    }

    /**
     * Operation createBrokerUsingPOSTWithHttpInfo
     *
     * Elmenti az új üzletkötőt.
     *
     * @param \Swagger\Client\Model\BrokerEntity $entity entity (required)
     * @return Array of \Swagger\Client\Model\BrokerEntity, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function createBrokerUsingPOSTWithHttpInfo($entity)
    {
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling createBrokerUsingPOST');
        }
        // parse inputs
        $resourcePath = "/broker/save";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json;charset=UTF-8'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BrokerEntity',
                '/broker/save'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BrokerEntity', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BrokerEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBrokerUsingDELETE
     *
     * Kitöröl egy üzletkötőt az adatbázisból.
     *
     * @param int $broker_id brokerId (required)
     * @return void
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function deleteBrokerUsingDELETE($broker_id)
    {
        list($response) = $this->deleteBrokerUsingDELETEWithHttpInfo($broker_id);
        return $response;
    }

    /**
     * Operation deleteBrokerUsingDELETEWithHttpInfo
     *
     * Kitöröl egy üzletkötőt az adatbázisból.
     *
     * @param int $broker_id brokerId (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function deleteBrokerUsingDELETEWithHttpInfo($broker_id)
    {
        // verify the required parameter 'broker_id' is set
        if ($broker_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $broker_id when calling deleteBrokerUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/broker/delete/{brokerId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($broker_id !== null) {
            $resourcePath = str_replace(
                "{" . "brokerId" . "}",
                $this->apiClient->getSerializer()->toPathValue($broker_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/broker/delete/{brokerId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getAllBrokersUsingGET
     *
     * Visszaadja az összes üzletkötőt.
     *
     * @return \Swagger\Client\Model\BrokerEntity[]
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getAllBrokersUsingGET()
    {
        list($response) = $this->getAllBrokersUsingGETWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllBrokersUsingGETWithHttpInfo
     *
     * Visszaadja az összes üzletkötőt.
     *
     * @return Array of \Swagger\Client\Model\BrokerEntity[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getAllBrokersUsingGETWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/broker/all";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BrokerEntity[]',
                '/broker/all'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BrokerEntity[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BrokerEntity[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBrokerUsingGET
     *
     * Visszaadja az üzletkötőt.
     *
     * @param int $id id (required)
     * @return \Swagger\Client\Model\BrokerEntity
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getBrokerUsingGET($id)
    {
        list($response) = $this->getBrokerUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getBrokerUsingGETWithHttpInfo
     *
     * Visszaadja az üzletkötőt.
     *
     * @param int $id id (required)
     * @return Array of \Swagger\Client\Model\BrokerEntity, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getBrokerUsingGETWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getBrokerUsingGET');
        }
        // parse inputs
        $resourcePath = "/broker/get/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BrokerEntity',
                '/broker/get/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BrokerEntity', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BrokerEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
