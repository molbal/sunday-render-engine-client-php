<?php
/**
 * ArchivedfilerestApi
 * PHP version 5
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sunday Archive Service
 *
 * Sunday Archive Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Sunday\ArchiveClient\Configuration;
use \Sunday\ArchiveClient\ApiClient;
use \Sunday\ArchiveClient\ApiException;
use \Sunday\ArchiveClient\ObjectSerializer;

/**
 * ArchivedfilerestApi Class Doc Comment
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArchivedfilerestApi
{

    /**
     * API Client
     *
     * @var \Sunday\ArchiveClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Sunday\ArchiveClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Sunday\ArchiveClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://136.144.173.90:8008/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Sunday\ArchiveClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Sunday\ArchiveClient\ApiClient $apiClient set the API client
     *
     * @return ArchivedfilerestApi
     */
    public function setApiClient(\Sunday\ArchiveClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation archiveNewFileUsingPOST
     *
     * Új fájl archiválása. Nem szükséges megadni: id, archiveDate, retentionExpire, revision. Muszáj megadni: description, documentType, fileContents, fileName
     *
     * @param \Swagger\Client\Model\ArchivedFile $archived_file archivedFile (required)
     * @param int $user_id userId (required)
     * @return \Swagger\Client\Model\ArchivedFile
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function archiveNewFileUsingPOST($archived_file, $user_id)
    {
        list($response) = $this->archiveNewFileUsingPOSTWithHttpInfo($archived_file, $user_id);
        return $response;
    }

    /**
     * Operation archiveNewFileUsingPOSTWithHttpInfo
     *
     * Új fájl archiválása. Nem szükséges megadni: id, archiveDate, retentionExpire, revision. Muszáj megadni: description, documentType, fileContents, fileName
     *
     * @param \Swagger\Client\Model\ArchivedFile $archived_file archivedFile (required)
     * @param int $user_id userId (required)
     * @return Array of \Swagger\Client\Model\ArchivedFile, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function archiveNewFileUsingPOSTWithHttpInfo($archived_file, $user_id)
    {
        // verify the required parameter 'archived_file' is set
        if ($archived_file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $archived_file when calling archiveNewFileUsingPOST');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling archiveNewFileUsingPOST');
        }
        // parse inputs
        $resourcePath = "/file/archive/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json;charset=UTF-8'));

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($archived_file)) {
            $_tempBody = $archived_file;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ArchivedFile',
                '/file/archive/{userId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ArchivedFile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ArchivedFile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserFilesUsingGET
     *
     * Visszaadja a felhasználóhoz tartozó fájlok listáját. A fájlok tartalmát nem olvassa ki, és a fájlok
     *
     * @param int $user_id userId (required)
     * @return \Swagger\Client\Model\ArchivedFile[]
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getUserFilesUsingGET($user_id)
    {
        list($response) = $this->getUserFilesUsingGETWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation getUserFilesUsingGETWithHttpInfo
     *
     * Visszaadja a felhasználóhoz tartozó fájlok listáját. A fájlok tartalmát nem olvassa ki, és a fájlok
     *
     * @param int $user_id userId (required)
     * @return Array of \Swagger\Client\Model\ArchivedFile[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getUserFilesUsingGETWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserFilesUsingGET');
        }
        // parse inputs
        $resourcePath = "/file/list/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ArchivedFile[]',
                '/file/list/{userId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ArchivedFile[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ArchivedFile[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation readFileUsingGET
     *
     * readFile
     *
     * @param int $id Id (required)
     * @return \Swagger\Client\Model\ArchivedFile
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function readFileUsingGET($id)
    {
        list($response) = $this->readFileUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation readFileUsingGETWithHttpInfo
     *
     * readFile
     *
     * @param int $id Id (required)
     * @return Array of \Swagger\Client\Model\ArchivedFile, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function readFileUsingGETWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling readFileUsingGET');
        }
        // parse inputs
        $resourcePath = "/file/{Id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "Id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ArchivedFile',
                '/file/{Id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ArchivedFile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ArchivedFile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation readRevisionsUsingGET
     *
     * readRevisions
     *
     * @param string $file_name fileName (required)
     * @param int $user_id userId (required)
     * @param bool $with_contents withContents (required)
     * @return \Swagger\Client\Model\ArchivedFile[]
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function readRevisionsUsingGET($file_name, $user_id, $with_contents)
    {
        list($response) = $this->readRevisionsUsingGETWithHttpInfo($file_name, $user_id, $with_contents);
        return $response;
    }

    /**
     * Operation readRevisionsUsingGETWithHttpInfo
     *
     * readRevisions
     *
     * @param string $file_name fileName (required)
     * @param int $user_id userId (required)
     * @param bool $with_contents withContents (required)
     * @return Array of \Swagger\Client\Model\ArchivedFile[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function readRevisionsUsingGETWithHttpInfo($file_name, $user_id, $with_contents)
    {
        // verify the required parameter 'file_name' is set
        if ($file_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_name when calling readRevisionsUsingGET');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling readRevisionsUsingGET');
        }
        // verify the required parameter 'with_contents' is set
        if ($with_contents === null) {
            throw new \InvalidArgumentException('Missing the required parameter $with_contents when calling readRevisionsUsingGET');
        }
        // parse inputs
        $resourcePath = "/file/readrevisions/{userId}/{fileName}/{withContents}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($file_name !== null) {
            $resourcePath = str_replace(
                "{" . "fileName" . "}",
                $this->apiClient->getSerializer()->toPathValue($file_name),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($with_contents !== null) {
            $resourcePath = str_replace(
                "{" . "withContents" . "}",
                $this->apiClient->getSerializer()->toPathValue($with_contents),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ArchivedFile[]',
                '/file/readrevisions/{userId}/{fileName}/{withContents}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ArchivedFile[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ArchivedFile[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFileUsingPOST
     *
     * Létező fájlból új verzió archiválása.
     *
     * @param \Swagger\Client\Model\ArchivedFile $archived_file archivedFile (required)
     * @param int $user_id userId (required)
     * @return \Swagger\Client\Model\ArchivedFile
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function updateFileUsingPOST($archived_file, $user_id)
    {
        list($response) = $this->updateFileUsingPOSTWithHttpInfo($archived_file, $user_id);
        return $response;
    }

    /**
     * Operation updateFileUsingPOSTWithHttpInfo
     *
     * Létező fájlból új verzió archiválása.
     *
     * @param \Swagger\Client\Model\ArchivedFile $archived_file archivedFile (required)
     * @param int $user_id userId (required)
     * @return Array of \Swagger\Client\Model\ArchivedFile, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function updateFileUsingPOSTWithHttpInfo($archived_file, $user_id)
    {
        // verify the required parameter 'archived_file' is set
        if ($archived_file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $archived_file when calling updateFileUsingPOST');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling updateFileUsingPOST');
        }
        // parse inputs
        $resourcePath = "/file/update/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json;charset=UTF-8'));

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($archived_file)) {
            $_tempBody = $archived_file;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ArchivedFile',
                '/file/update/{userId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ArchivedFile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ArchivedFile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
