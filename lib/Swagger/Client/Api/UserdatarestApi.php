<?php
/**
 * UserdatarestApi
 * PHP version 5
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sunday Archive Service
 *
 * Sunday Archive Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Sunday\ArchiveClient\Configuration;
use \Sunday\ArchiveClient\ApiClient;
use \Sunday\ArchiveClient\ApiException;
use \Sunday\ArchiveClient\ObjectSerializer;

/**
 * UserdatarestApi Class Doc Comment
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserdatarestApi
{

    /**
     * API Client
     *
     * @var \Sunday\ArchiveClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Sunday\ArchiveClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Sunday\ArchiveClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://136.144.173.90:8008/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Sunday\ArchiveClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Sunday\ArchiveClient\ApiClient $apiClient set the API client
     *
     * @return UserdatarestApi
     */
    public function setApiClient(\Sunday\ArchiveClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation assignAddressEntityUsingPOST
     *
     * Hozzárendel egy elmentett címet egy felhasználóhoz.
     *
     * @param int $address_id addressId (required)
     * @param string $address_type addressType (required)
     * @param int $user_id userId (required)
     * @return void
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function assignAddressEntityUsingPOST($address_id, $address_type, $user_id)
    {
        list($response) = $this->assignAddressEntityUsingPOSTWithHttpInfo($address_id, $address_type, $user_id);
        return $response;
    }

    /**
     * Operation assignAddressEntityUsingPOSTWithHttpInfo
     *
     * Hozzárendel egy elmentett címet egy felhasználóhoz.
     *
     * @param int $address_id addressId (required)
     * @param string $address_type addressType (required)
     * @param int $user_id userId (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function assignAddressEntityUsingPOSTWithHttpInfo($address_id, $address_type, $user_id)
    {
        // verify the required parameter 'address_id' is set
        if ($address_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address_id when calling assignAddressEntityUsingPOST');
        }
        // verify the required parameter 'address_type' is set
        if ($address_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address_type when calling assignAddressEntityUsingPOST');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling assignAddressEntityUsingPOST');
        }
        // parse inputs
        $resourcePath = "/userdata/assignaddress/{userId}/{addressId}/{addressType}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                "{" . "addressId" . "}",
                $this->apiClient->getSerializer()->toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($address_type !== null) {
            $resourcePath = str_replace(
                "{" . "addressType" . "}",
                $this->apiClient->getSerializer()->toPathValue($address_type),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userdata/assignaddress/{userId}/{addressId}/{addressType}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAddressEntityUsingDELETE
     *
     * Kitöröl egy címet az adatbázisból. Ha hozzá van rendelve valamilyen felhasználóhoz, mint lakcím, vagy levelezési cím, akkor hibát dob
     *
     * @param int $address_id addressId (required)
     * @return void
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function deleteAddressEntityUsingDELETE($address_id)
    {
        list($response) = $this->deleteAddressEntityUsingDELETEWithHttpInfo($address_id);
        return $response;
    }

    /**
     * Operation deleteAddressEntityUsingDELETEWithHttpInfo
     *
     * Kitöröl egy címet az adatbázisból. Ha hozzá van rendelve valamilyen felhasználóhoz, mint lakcím, vagy levelezési cím, akkor hibát dob
     *
     * @param int $address_id addressId (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function deleteAddressEntityUsingDELETEWithHttpInfo($address_id)
    {
        // verify the required parameter 'address_id' is set
        if ($address_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address_id when calling deleteAddressEntityUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/userdata/deleteaddress/{addressId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                "{" . "addressId" . "}",
                $this->apiClient->getSerializer()->toPathValue($address_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userdata/deleteaddress/{addressId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUsingDELETE
     *
     * Kitörli az egy felhasználóhoz tartozó személyes adatokat.
     *
     * @param int $user_id userId (required)
     * @return void
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function deleteUsingDELETE($user_id)
    {
        list($response) = $this->deleteUsingDELETEWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation deleteUsingDELETEWithHttpInfo
     *
     * Kitörli az egy felhasználóhoz tartozó személyes adatokat.
     *
     * @param int $user_id userId (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function deleteUsingDELETEWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling deleteUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/userdata/delete/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userdata/delete/{userId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation gdprNukeUsingDELETE
     *
     * Törli az egy felhasználóhoz tartozó adatokat, címeket, gépjárműveket, és a bejelentkezést letiltja.
     *
     * @param int $user_id userId (required)
     * @return void
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function gdprNukeUsingDELETE($user_id)
    {
        list($response) = $this->gdprNukeUsingDELETEWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation gdprNukeUsingDELETEWithHttpInfo
     *
     * Törli az egy felhasználóhoz tartozó adatokat, címeket, gépjárműveket, és a bejelentkezést letiltja.
     *
     * @param int $user_id userId (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function gdprNukeUsingDELETEWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling gdprNukeUsingDELETE');
        }
        // parse inputs
        $resourcePath = "/userdata/delete-all/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userdata/delete-all/{userId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getUserDataUsingGET
     *
     * Lekéri a felhasználó adatait
     *
     * @param int $user_id userId (required)
     * @return \Swagger\Client\Model\UserDataEntity
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getUserDataUsingGET($user_id)
    {
        list($response) = $this->getUserDataUsingGETWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation getUserDataUsingGETWithHttpInfo
     *
     * Lekéri a felhasználó adatait
     *
     * @param int $user_id userId (required)
     * @return Array of \Swagger\Client\Model\UserDataEntity, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getUserDataUsingGETWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserDataUsingGET');
        }
        // parse inputs
        $resourcePath = "/userdata/get/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserDataEntity',
                '/userdata/get/{userId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserDataEntity', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserDataEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation saveAddressUsingPOST
     *
     * Elment egy címet. A cím ID mezőjét nem kell tölteni, mivel ezt automatikusan generálja az SQL szerver. A válasz tartalmazni fogja az ID mezőt is, kitöltve.
     *
     * @param \Swagger\Client\Model\AddressEntity $address_entity addressEntity (required)
     * @return \Swagger\Client\Model\AddressEntity
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function saveAddressUsingPOST($address_entity)
    {
        list($response) = $this->saveAddressUsingPOSTWithHttpInfo($address_entity);
        return $response;
    }

    /**
     * Operation saveAddressUsingPOSTWithHttpInfo
     *
     * Elment egy címet. A cím ID mezőjét nem kell tölteni, mivel ezt automatikusan generálja az SQL szerver. A válasz tartalmazni fogja az ID mezőt is, kitöltve.
     *
     * @param \Swagger\Client\Model\AddressEntity $address_entity addressEntity (required)
     * @return Array of \Swagger\Client\Model\AddressEntity, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function saveAddressUsingPOSTWithHttpInfo($address_entity)
    {
        // verify the required parameter 'address_entity' is set
        if ($address_entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address_entity when calling saveAddressUsingPOST');
        }
        // parse inputs
        $resourcePath = "/userdata/saveaddress";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json;charset=UTF-8'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($address_entity)) {
            $_tempBody = $address_entity;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AddressEntity',
                '/userdata/saveaddress'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AddressEntity', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AddressEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation saveUserDataUsingPOST
     *
     * Felhasználói adatok mentése / frissítése.
     *
     * @param \Swagger\Client\Model\UserDataSaveRequest $save_request saveRequest (required)
     * @return void
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function saveUserDataUsingPOST($save_request)
    {
        list($response) = $this->saveUserDataUsingPOSTWithHttpInfo($save_request);
        return $response;
    }

    /**
     * Operation saveUserDataUsingPOSTWithHttpInfo
     *
     * Felhasználói adatok mentése / frissítése.
     *
     * @param \Swagger\Client\Model\UserDataSaveRequest $save_request saveRequest (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function saveUserDataUsingPOSTWithHttpInfo($save_request)
    {
        // verify the required parameter 'save_request' is set
        if ($save_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $save_request when calling saveUserDataUsingPOST');
        }
        // parse inputs
        $resourcePath = "/userdata/save";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json;charset=UTF-8'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($save_request)) {
            $_tempBody = $save_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/userdata/save'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
