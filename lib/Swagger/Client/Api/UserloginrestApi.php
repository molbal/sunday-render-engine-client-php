<?php
/**
 * UserloginrestApi
 * PHP version 5
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sunday Archive Service
 *
 * Sunday Archive Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Sunday\ArchiveClient\Configuration;
use \Sunday\ArchiveClient\ApiClient;
use \Sunday\ArchiveClient\ApiException;
use \Sunday\ArchiveClient\ObjectSerializer;

/**
 * UserloginrestApi Class Doc Comment
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserloginrestApi
{

    /**
     * API Client
     *
     * @var \Sunday\ArchiveClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Sunday\ArchiveClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Sunday\ArchiveClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://136.144.173.90:8008/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Sunday\ArchiveClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Sunday\ArchiveClient\ApiClient $apiClient set the API client
     *
     * @return UserloginrestApi
     */
    public function setApiClient(\Sunday\ArchiveClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation authenticateUsingPOST
     *
     * Felhasználó beléptetése.
     *
     * @param \Swagger\Client\Model\LoginRequest $login_request loginRequest (required)
     * @return \Swagger\Client\Model\LoginResponse
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function authenticateUsingPOST($login_request)
    {
        list($response) = $this->authenticateUsingPOSTWithHttpInfo($login_request);
        return $response;
    }

    /**
     * Operation authenticateUsingPOSTWithHttpInfo
     *
     * Felhasználó beléptetése.
     *
     * @param \Swagger\Client\Model\LoginRequest $login_request loginRequest (required)
     * @return Array of \Swagger\Client\Model\LoginResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function authenticateUsingPOSTWithHttpInfo($login_request)
    {
        // verify the required parameter 'login_request' is set
        if ($login_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login_request when calling authenticateUsingPOST');
        }
        // parse inputs
        $resourcePath = "/users/authenticate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json;charset=UTF-8'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($login_request)) {
            $_tempBody = $login_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LoginResponse',
                '/users/authenticate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LoginResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LoginResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation changePasswordUsingPOST
     *
     * Felhasználói jelszóváltoztatásra szolgáló függvény
     *
     * @param \Swagger\Client\Model\PasswordChangeRequest $password_change_request passwordChangeRequest (required)
     * @return \Swagger\Client\Model\UserLoginEntity
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function changePasswordUsingPOST($password_change_request)
    {
        list($response) = $this->changePasswordUsingPOSTWithHttpInfo($password_change_request);
        return $response;
    }

    /**
     * Operation changePasswordUsingPOSTWithHttpInfo
     *
     * Felhasználói jelszóváltoztatásra szolgáló függvény
     *
     * @param \Swagger\Client\Model\PasswordChangeRequest $password_change_request passwordChangeRequest (required)
     * @return Array of \Swagger\Client\Model\UserLoginEntity, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function changePasswordUsingPOSTWithHttpInfo($password_change_request)
    {
        // verify the required parameter 'password_change_request' is set
        if ($password_change_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password_change_request when calling changePasswordUsingPOST');
        }
        // parse inputs
        $resourcePath = "/users/newpassword";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json;charset=UTF-8'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($password_change_request)) {
            $_tempBody = $password_change_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserLoginEntity',
                '/users/newpassword'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserLoginEntity', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserLoginEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation changeTypeUsingPOST
     *
     * Lecseréli egy felhasználó típusát. Típusok: NORMAL,     BANNED,     DELETED,     ADMIN
     *
     * @param string $new_type newType (required)
     * @param int $user_id userId (required)
     * @return void
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function changeTypeUsingPOST($new_type, $user_id)
    {
        list($response) = $this->changeTypeUsingPOSTWithHttpInfo($new_type, $user_id);
        return $response;
    }

    /**
     * Operation changeTypeUsingPOSTWithHttpInfo
     *
     * Lecseréli egy felhasználó típusát. Típusok: NORMAL,     BANNED,     DELETED,     ADMIN
     *
     * @param string $new_type newType (required)
     * @param int $user_id userId (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function changeTypeUsingPOSTWithHttpInfo($new_type, $user_id)
    {
        // verify the required parameter 'new_type' is set
        if ($new_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_type when calling changeTypeUsingPOST');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling changeTypeUsingPOST');
        }
        // parse inputs
        $resourcePath = "/users/change_type/{userId}/{newType}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($new_type !== null) {
            $resourcePath = str_replace(
                "{" . "newType" . "}",
                $this->apiClient->getSerializer()->toPathValue($new_type),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/change_type/{userId}/{newType}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation createUserLoginUsingPOST
     *
     * Új felhasználó létrehozására szolgáló hívás.
     *
     * @param \Swagger\Client\Model\NewUserRequest $new_user_request newUserRequest (required)
     * @return \Swagger\Client\Model\UserLoginEntity
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function createUserLoginUsingPOST($new_user_request)
    {
        list($response) = $this->createUserLoginUsingPOSTWithHttpInfo($new_user_request);
        return $response;
    }

    /**
     * Operation createUserLoginUsingPOSTWithHttpInfo
     *
     * Új felhasználó létrehozására szolgáló hívás.
     *
     * @param \Swagger\Client\Model\NewUserRequest $new_user_request newUserRequest (required)
     * @return Array of \Swagger\Client\Model\UserLoginEntity, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function createUserLoginUsingPOSTWithHttpInfo($new_user_request)
    {
        // verify the required parameter 'new_user_request' is set
        if ($new_user_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_user_request when calling createUserLoginUsingPOST');
        }
        // parse inputs
        $resourcePath = "/users/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json;charset=UTF-8'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($new_user_request)) {
            $_tempBody = $new_user_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserLoginEntity',
                '/users/create'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserLoginEntity', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserLoginEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchActiveUsersUsingGET
     *
     * Visszaadja a nem törölt felhasználók listáját. A page az oldalszám (0-től kezdődik) a pageLength pedig egy oldal hossza
     *
     * @param int $page page (required)
     * @param int $page_length pageLength (required)
     * @return \Swagger\Client\Model\AllUsersPageResponse
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function fetchActiveUsersUsingGET($page, $page_length)
    {
        list($response) = $this->fetchActiveUsersUsingGETWithHttpInfo($page, $page_length);
        return $response;
    }

    /**
     * Operation fetchActiveUsersUsingGETWithHttpInfo
     *
     * Visszaadja a nem törölt felhasználók listáját. A page az oldalszám (0-től kezdődik) a pageLength pedig egy oldal hossza
     *
     * @param int $page page (required)
     * @param int $page_length pageLength (required)
     * @return Array of \Swagger\Client\Model\AllUsersPageResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function fetchActiveUsersUsingGETWithHttpInfo($page, $page_length)
    {
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling fetchActiveUsersUsingGET');
        }
        // verify the required parameter 'page_length' is set
        if ($page_length === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_length when calling fetchActiveUsersUsingGET');
        }
        // parse inputs
        $resourcePath = "/users/active/{page}/{pageLength}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                "{" . "page" . "}",
                $this->apiClient->getSerializer()->toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($page_length !== null) {
            $resourcePath = str_replace(
                "{" . "pageLength" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_length),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AllUsersPageResponse',
                '/users/active/{page}/{pageLength}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AllUsersPageResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AllUsersPageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fetchAllUsersUsingGET
     *
     * Visszaadja a felhasználók listáját. A page az oldalszám (0-től kezdődik) a pageLength pedig egy oldal hossza
     *
     * @param int $page page (required)
     * @param int $page_length pageLength (required)
     * @return \Swagger\Client\Model\AllUsersPageResponse
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function fetchAllUsersUsingGET($page, $page_length)
    {
        list($response) = $this->fetchAllUsersUsingGETWithHttpInfo($page, $page_length);
        return $response;
    }

    /**
     * Operation fetchAllUsersUsingGETWithHttpInfo
     *
     * Visszaadja a felhasználók listáját. A page az oldalszám (0-től kezdődik) a pageLength pedig egy oldal hossza
     *
     * @param int $page page (required)
     * @param int $page_length pageLength (required)
     * @return Array of \Swagger\Client\Model\AllUsersPageResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function fetchAllUsersUsingGETWithHttpInfo($page, $page_length)
    {
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling fetchAllUsersUsingGET');
        }
        // verify the required parameter 'page_length' is set
        if ($page_length === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_length when calling fetchAllUsersUsingGET');
        }
        // parse inputs
        $resourcePath = "/users/all/{page}/{pageLength}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($page !== null) {
            $resourcePath = str_replace(
                "{" . "page" . "}",
                $this->apiClient->getSerializer()->toPathValue($page),
                $resourcePath
            );
        }
        // path params
        if ($page_length !== null) {
            $resourcePath = str_replace(
                "{" . "pageLength" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_length),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AllUsersPageResponse',
                '/users/all/{page}/{pageLength}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AllUsersPageResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AllUsersPageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserIdUsingGET
     *
     * Visszaadja a userID-t email alapján
     *
     * @param string $login_email loginEmail (required)
     * @return int
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getUserIdUsingGET($login_email)
    {
        list($response) = $this->getUserIdUsingGETWithHttpInfo($login_email);
        return $response;
    }

    /**
     * Operation getUserIdUsingGETWithHttpInfo
     *
     * Visszaadja a userID-t email alapján
     *
     * @param string $login_email loginEmail (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getUserIdUsingGETWithHttpInfo($login_email)
    {
        // verify the required parameter 'login_email' is set
        if ($login_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login_email when calling getUserIdUsingGET');
        }
        // parse inputs
        $resourcePath = "/users/getIdFromEmail/{loginEmail}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($login_email !== null) {
            $resourcePath = str_replace(
                "{" . "loginEmail" . "}",
                $this->apiClient->getSerializer()->toPathValue($login_email),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/users/getIdFromEmail/{loginEmail}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserTypeUsingGET
     *
     * Visszaadja a felhasználóhoz tartozó login típust
     *
     * @param int $user_id userId (required)
     * @return string
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getUserTypeUsingGET($user_id)
    {
        list($response) = $this->getUserTypeUsingGETWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation getUserTypeUsingGETWithHttpInfo
     *
     * Visszaadja a felhasználóhoz tartozó login típust
     *
     * @param int $user_id userId (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Sunday\ArchiveClient\ApiException on non-2xx response
     */
    public function getUserTypeUsingGETWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserTypeUsingGET');
        }
        // parse inputs
        $resourcePath = "/users/get_type/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json;charset=UTF-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/users/get_type/{userId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
