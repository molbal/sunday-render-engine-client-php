<?php
/**
 * RenderRequestEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sunday\RenderClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sunday Render Service
 *
 * Sunday Render Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RenderRequestEntity Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Sunday\RenderClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RenderRequestEntity implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RenderRequestEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'document_type_id' => 'int',
        'extra_engine_parameters' => 'string',
        'id' => 'int',
        'keywords' => 'map[string,string]',
        'project_id' => 'int',
        'render_finished' => '\DateTime',
        'render_requested' => '\DateTime',
        'render_target' => 'string',
        'rendered_by' => 'string',
        'rendered_duration' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'document_type_id' => 'documentTypeId',
        'extra_engine_parameters' => 'extraEngineParameters',
        'id' => 'id',
        'keywords' => 'keywords',
        'project_id' => 'projectId',
        'render_finished' => 'renderFinished',
        'render_requested' => 'renderRequested',
        'render_target' => 'renderTarget',
        'rendered_by' => 'renderedBy',
        'rendered_duration' => 'renderedDuration'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'document_type_id' => 'setDocumentTypeId',
        'extra_engine_parameters' => 'setExtraEngineParameters',
        'id' => 'setId',
        'keywords' => 'setKeywords',
        'project_id' => 'setProjectId',
        'render_finished' => 'setRenderFinished',
        'render_requested' => 'setRenderRequested',
        'render_target' => 'setRenderTarget',
        'rendered_by' => 'setRenderedBy',
        'rendered_duration' => 'setRenderedDuration'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'document_type_id' => 'getDocumentTypeId',
        'extra_engine_parameters' => 'getExtraEngineParameters',
        'id' => 'getId',
        'keywords' => 'getKeywords',
        'project_id' => 'getProjectId',
        'render_finished' => 'getRenderFinished',
        'render_requested' => 'getRenderRequested',
        'render_target' => 'getRenderTarget',
        'rendered_by' => 'getRenderedBy',
        'rendered_duration' => 'getRenderedDuration'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const RENDER_TARGET_PDF = 'PDF';
    const RENDER_TARGET_EMBEDDED_HTML = 'EMBEDDED_HTML';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRenderTargetAllowableValues()
    {
        return [
            self::RENDER_TARGET_PDF,
            self::RENDER_TARGET_EMBEDDED_HTML,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_type_id'] = isset($data['document_type_id']) ? $data['document_type_id'] : null;
        $this->container['extra_engine_parameters'] = isset($data['extra_engine_parameters']) ? $data['extra_engine_parameters'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['render_finished'] = isset($data['render_finished']) ? $data['render_finished'] : null;
        $this->container['render_requested'] = isset($data['render_requested']) ? $data['render_requested'] : null;
        $this->container['render_target'] = isset($data['render_target']) ? $data['render_target'] : null;
        $this->container['rendered_by'] = isset($data['rendered_by']) ? $data['rendered_by'] : null;
        $this->container['rendered_duration'] = isset($data['rendered_duration']) ? $data['rendered_duration'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("PDF", "EMBEDDED_HTML");
        if (!in_array($this->container['render_target'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'render_target', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("PDF", "EMBEDDED_HTML");
        if (!in_array($this->container['render_target'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets document_type_id
     * @return int
     */
    public function getDocumentTypeId()
    {
        return $this->container['document_type_id'];
    }

    /**
     * Sets document_type_id
     * @param int $document_type_id Document ID
     * @return $this
     */
    public function setDocumentTypeId($document_type_id)
    {
        $this->container['document_type_id'] = $document_type_id;

        return $this;
    }

    /**
     * Gets extra_engine_parameters
     * @return string
     */
    public function getExtraEngineParameters()
    {
        return $this->container['extra_engine_parameters'];
    }

    /**
     * Sets extra_engine_parameters
     * @param string $extra_engine_parameters Extra WKHTMLTOPDF engine parameters, seen here: https://wkhtmltopdf.org/usage/wkhtmltopdf.txt
     * @return $this
     */
    public function setExtraEngineParameters($extra_engine_parameters)
    {
        $this->container['extra_engine_parameters'] = $extra_engine_parameters;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique identifier. Unique amongst render requests, but not other objects.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets keywords
     * @return map[string,string]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     * @param map[string,string] $keywords List of keyword keys and values
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets project_id
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     * @param int $project_id Project ID
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets render_finished
     * @return \DateTime
     */
    public function getRenderFinished()
    {
        return $this->container['render_finished'];
    }

    /**
     * Sets render_finished
     * @param \DateTime $render_finished Date and time the render request was served
     * @return $this
     */
    public function setRenderFinished($render_finished)
    {
        $this->container['render_finished'] = $render_finished;

        return $this;
    }

    /**
     * Gets render_requested
     * @return \DateTime
     */
    public function getRenderRequested()
    {
        return $this->container['render_requested'];
    }

    /**
     * Sets render_requested
     * @param \DateTime $render_requested Date and time the render request was received
     * @return $this
     */
    public function setRenderRequested($render_requested)
    {
        $this->container['render_requested'] = $render_requested;

        return $this;
    }

    /**
     * Gets render_target
     * @return string
     */
    public function getRenderTarget()
    {
        return $this->container['render_target'];
    }

    /**
     * Sets render_target
     * @param string $render_target Render target.
     * @return $this
     */
    public function setRenderTarget($render_target)
    {
        $allowed_values = array('PDF', 'EMBEDDED_HTML');
        if (!in_array($render_target, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'render_target', must be one of 'PDF', 'EMBEDDED_HTML'");
        }
        $this->container['render_target'] = $render_target;

        return $this;
    }

    /**
     * Gets rendered_by
     * @return string
     */
    public function getRenderedBy()
    {
        return $this->container['rendered_by'];
    }

    /**
     * Sets rendered_by
     * @param string $rendered_by Name of entity who sent the request
     * @return $this
     */
    public function setRenderedBy($rendered_by)
    {
        $this->container['rendered_by'] = $rendered_by;

        return $this;
    }

    /**
     * Gets rendered_duration
     * @return int
     */
    public function getRenderedDuration()
    {
        return $this->container['rendered_duration'];
    }

    /**
     * Sets rendered_duration
     * @param int $rendered_duration The time it took do do the rendering (including verifying and generating files, excluding waiting for free thread)
     * @return $this
     */
    public function setRenderedDuration($rendered_duration)
    {
        $this->container['rendered_duration'] = $rendered_duration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Sunday\RenderClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Sunday\RenderClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


