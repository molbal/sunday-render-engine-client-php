<?php
/**
 * PaymentRecordChange
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sunday Archive Service
 *
 * Sunday Archive Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PaymentRecordChange Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Sunday\ArchiveClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentRecordChange implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PaymentRecordChange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'change_time' => '\DateTime',
        'id' => 'int',
        'new_payment_status' => 'string',
        'old_payment_status' => 'string',
        'payment_record_id' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'change_time' => 'changeTime',
        'id' => 'id',
        'new_payment_status' => 'newPaymentStatus',
        'old_payment_status' => 'oldPaymentStatus',
        'payment_record_id' => 'paymentRecordId'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'change_time' => 'setChangeTime',
        'id' => 'setId',
        'new_payment_status' => 'setNewPaymentStatus',
        'old_payment_status' => 'setOldPaymentStatus',
        'payment_record_id' => 'setPaymentRecordId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'change_time' => 'getChangeTime',
        'id' => 'getId',
        'new_payment_status' => 'getNewPaymentStatus',
        'old_payment_status' => 'getOldPaymentStatus',
        'payment_record_id' => 'getPaymentRecordId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const NEW_PAYMENT_STATUS_WAITING = 'WAITING';
    const NEW_PAYMENT_STATUS_INITIALIZED = 'INITIALIZED';
    const NEW_PAYMENT_STATUS_PENDING = 'PENDING';
    const NEW_PAYMENT_STATUS_SUCCESS = 'SUCCESS';
    const NEW_PAYMENT_STATUS_FAILED = 'FAILED';
    const OLD_PAYMENT_STATUS_WAITING = 'WAITING';
    const OLD_PAYMENT_STATUS_INITIALIZED = 'INITIALIZED';
    const OLD_PAYMENT_STATUS_PENDING = 'PENDING';
    const OLD_PAYMENT_STATUS_SUCCESS = 'SUCCESS';
    const OLD_PAYMENT_STATUS_FAILED = 'FAILED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getNewPaymentStatusAllowableValues()
    {
        return [
            self::NEW_PAYMENT_STATUS_WAITING,
            self::NEW_PAYMENT_STATUS_INITIALIZED,
            self::NEW_PAYMENT_STATUS_PENDING,
            self::NEW_PAYMENT_STATUS_SUCCESS,
            self::NEW_PAYMENT_STATUS_FAILED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOldPaymentStatusAllowableValues()
    {
        return [
            self::OLD_PAYMENT_STATUS_WAITING,
            self::OLD_PAYMENT_STATUS_INITIALIZED,
            self::OLD_PAYMENT_STATUS_PENDING,
            self::OLD_PAYMENT_STATUS_SUCCESS,
            self::OLD_PAYMENT_STATUS_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['change_time'] = isset($data['change_time']) ? $data['change_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['new_payment_status'] = isset($data['new_payment_status']) ? $data['new_payment_status'] : null;
        $this->container['old_payment_status'] = isset($data['old_payment_status']) ? $data['old_payment_status'] : null;
        $this->container['payment_record_id'] = isset($data['payment_record_id']) ? $data['payment_record_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("WAITING", "INITIALIZED", "PENDING", "SUCCESS", "FAILED");
        if (!in_array($this->container['new_payment_status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'new_payment_status', must be one of #{allowed_values}.";
        }

        $allowed_values = array("WAITING", "INITIALIZED", "PENDING", "SUCCESS", "FAILED");
        if (!in_array($this->container['old_payment_status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'old_payment_status', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("WAITING", "INITIALIZED", "PENDING", "SUCCESS", "FAILED");
        if (!in_array($this->container['new_payment_status'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("WAITING", "INITIALIZED", "PENDING", "SUCCESS", "FAILED");
        if (!in_array($this->container['old_payment_status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets change_time
     * @return \DateTime
     */
    public function getChangeTime()
    {
        return $this->container['change_time'];
    }

    /**
     * Sets change_time
     * @param \DateTime $change_time A fizetés rögzítésének időpontja
     * @return $this
     */
    public function setChangeTime($change_time)
    {
        $this->container['change_time'] = $change_time;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets new_payment_status
     * @return string
     */
    public function getNewPaymentStatus()
    {
        return $this->container['new_payment_status'];
    }

    /**
     * Sets new_payment_status
     * @param string $new_payment_status Új státusz
     * @return $this
     */
    public function setNewPaymentStatus($new_payment_status)
    {
        $allowed_values = array('WAITING', 'INITIALIZED', 'PENDING', 'SUCCESS', 'FAILED');
        if (!in_array($new_payment_status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'new_payment_status', must be one of 'WAITING', 'INITIALIZED', 'PENDING', 'SUCCESS', 'FAILED'");
        }
        $this->container['new_payment_status'] = $new_payment_status;

        return $this;
    }

    /**
     * Gets old_payment_status
     * @return string
     */
    public function getOldPaymentStatus()
    {
        return $this->container['old_payment_status'];
    }

    /**
     * Sets old_payment_status
     * @param string $old_payment_status Régi státusz
     * @return $this
     */
    public function setOldPaymentStatus($old_payment_status)
    {
        $allowed_values = array('WAITING', 'INITIALIZED', 'PENDING', 'SUCCESS', 'FAILED');
        if (!in_array($old_payment_status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'old_payment_status', must be one of 'WAITING', 'INITIALIZED', 'PENDING', 'SUCCESS', 'FAILED'");
        }
        $this->container['old_payment_status'] = $old_payment_status;

        return $this;
    }

    /**
     * Gets payment_record_id
     * @return int
     */
    public function getPaymentRecordId()
    {
        return $this->container['payment_record_id'];
    }

    /**
     * Sets payment_record_id
     * @param int $payment_record_id A hozzá tartozó PaymentRecord azonosítója
     * @return $this
     */
    public function setPaymentRecordId($payment_record_id)
    {
        $this->container['payment_record_id'] = $payment_record_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Sunday\ArchiveClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Sunday\ArchiveClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


