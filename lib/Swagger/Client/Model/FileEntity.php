<?php
/**
 * FileEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sunday\RenderService\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sunday Render Service
 *
 * Sunday Render Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FileEntity Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Sunday\RenderService\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FileEntity implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FileEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'auto_embed' => 'bool',
        'document_type_id' => 'int',
        'file_contents' => 'string',
        'file_name' => 'string',
        'file_scope' => 'string',
        'id' => 'int',
        'project_id' => 'int',
        'type' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'auto_embed' => 'autoEmbed',
        'document_type_id' => 'documentTypeId',
        'file_contents' => 'fileContents',
        'file_name' => 'fileName',
        'file_scope' => 'fileScope',
        'id' => 'id',
        'project_id' => 'projectId',
        'type' => 'type'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'auto_embed' => 'setAutoEmbed',
        'document_type_id' => 'setDocumentTypeId',
        'file_contents' => 'setFileContents',
        'file_name' => 'setFileName',
        'file_scope' => 'setFileScope',
        'id' => 'setId',
        'project_id' => 'setProjectId',
        'type' => 'setType'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'auto_embed' => 'getAutoEmbed',
        'document_type_id' => 'getDocumentTypeId',
        'file_contents' => 'getFileContents',
        'file_name' => 'getFileName',
        'file_scope' => 'getFileScope',
        'id' => 'getId',
        'project_id' => 'getProjectId',
        'type' => 'getType'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const FILE_SCOPE_PROJECT = 'PROJECT';
    const FILE_SCOPE_DOCUMENT = 'DOCUMENT';
    const TYPE_HTML = 'HTML';
    const TYPE_SCRIPT = 'SCRIPT';
    const TYPE_STYLESHEET = 'STYLESHEET';
    const TYPE_IMAGE = 'IMAGE';
    const TYPE_OTHER = 'OTHER';
    const TYPE_MARKDOWN = 'MARKDOWN';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFileScopeAllowableValues()
    {
        return [
            self::FILE_SCOPE_PROJECT,
            self::FILE_SCOPE_DOCUMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_HTML,
            self::TYPE_SCRIPT,
            self::TYPE_STYLESHEET,
            self::TYPE_IMAGE,
            self::TYPE_OTHER,
            self::TYPE_MARKDOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_embed'] = isset($data['auto_embed']) ? $data['auto_embed'] : null;
        $this->container['document_type_id'] = isset($data['document_type_id']) ? $data['document_type_id'] : null;
        $this->container['file_contents'] = isset($data['file_contents']) ? $data['file_contents'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['file_scope'] = isset($data['file_scope']) ? $data['file_scope'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("PROJECT", "DOCUMENT");
        if (!in_array($this->container['file_scope'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'file_scope', must be one of #{allowed_values}.";
        }

        $allowed_values = array("HTML", "SCRIPT", "STYLESHEET", "IMAGE", "OTHER", "MARKDOWN");
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("PROJECT", "DOCUMENT");
        if (!in_array($this->container['file_scope'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("HTML", "SCRIPT", "STYLESHEET", "IMAGE", "OTHER", "MARKDOWN");
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets auto_embed
     * @return bool
     */
    public function getAutoEmbed()
    {
        return $this->container['auto_embed'];
    }

    /**
     * Sets auto_embed
     * @param bool $auto_embed If set to true, this will automatically be embedded to all files in the project. Only applicable if in project scope.
     * @return $this
     */
    public function setAutoEmbed($auto_embed)
    {
        $this->container['auto_embed'] = $auto_embed;

        return $this;
    }

    /**
     * Gets document_type_id
     * @return int
     */
    public function getDocumentTypeId()
    {
        return $this->container['document_type_id'];
    }

    /**
     * Sets document_type_id
     * @param int $document_type_id Document Type ID
     * @return $this
     */
    public function setDocumentTypeId($document_type_id)
    {
        $this->container['document_type_id'] = $document_type_id;

        return $this;
    }

    /**
     * Gets file_contents
     * @return string
     */
    public function getFileContents()
    {
        return $this->container['file_contents'];
    }

    /**
     * Sets file_contents
     * @param string $file_contents File contents, as a byte array.
     * @return $this
     */
    public function setFileContents($file_contents)
    {
        $this->container['file_contents'] = $file_contents;

        return $this;
    }

    /**
     * Gets file_name
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     * @param string $file_name Mandatory field. This is the filename, including extension of the file.
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets file_scope
     * @return string
     */
    public function getFileScope()
    {
        return $this->container['file_scope'];
    }

    /**
     * Sets file_scope
     * @param string $file_scope Enum, mandatory.Scope for the file
     * @return $this
     */
    public function setFileScope($file_scope)
    {
        $allowed_values = array('PROJECT', 'DOCUMENT');
        if (!in_array($file_scope, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'file_scope', must be one of 'PROJECT', 'DOCUMENT'");
        }
        $this->container['file_scope'] = $file_scope;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project_id
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     * @param int $project_id Mandatory field. ID of the parent project.
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Enum, mandatory. Type of the file.
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('HTML', 'SCRIPT', 'STYLESHEET', 'IMAGE', 'OTHER', 'MARKDOWN');
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'HTML', 'SCRIPT', 'STYLESHEET', 'IMAGE', 'OTHER', 'MARKDOWN'");
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Sunday\RenderService\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Sunday\RenderService\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


