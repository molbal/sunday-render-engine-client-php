<?php
/**
 * InsuranceBondEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sunday\ArchiveClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sunday Archive Service
 *
 * Sunday Archive Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InsuranceBondEntity Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Sunday\ArchiveClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InsuranceBondEntity implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InsuranceBondEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'broker_id' => 'int',
        'expire_date' => '\DateTime',
        'id' => 'int',
        'insurance_description' => 'string',
        'insurance_type' => 'string',
        'relevant_document_id' => 'int',
        'start_date' => '\DateTime'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'broker_id' => 'brokerId',
        'expire_date' => 'expireDate',
        'id' => 'id',
        'insurance_description' => 'insuranceDescription',
        'insurance_type' => 'insuranceType',
        'relevant_document_id' => 'relevantDocumentId',
        'start_date' => 'startDate'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'broker_id' => 'setBrokerId',
        'expire_date' => 'setExpireDate',
        'id' => 'setId',
        'insurance_description' => 'setInsuranceDescription',
        'insurance_type' => 'setInsuranceType',
        'relevant_document_id' => 'setRelevantDocumentId',
        'start_date' => 'setStartDate'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'broker_id' => 'getBrokerId',
        'expire_date' => 'getExpireDate',
        'id' => 'getId',
        'insurance_description' => 'getInsuranceDescription',
        'insurance_type' => 'getInsuranceType',
        'relevant_document_id' => 'getRelevantDocumentId',
        'start_date' => 'getStartDate'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['broker_id'] = isset($data['broker_id']) ? $data['broker_id'] : null;
        $this->container['expire_date'] = isset($data['expire_date']) ? $data['expire_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['insurance_description'] = isset($data['insurance_description']) ? $data['insurance_description'] : null;
        $this->container['insurance_type'] = isset($data['insurance_type']) ? $data['insurance_type'] : null;
        $this->container['relevant_document_id'] = isset($data['relevant_document_id']) ? $data['relevant_document_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets broker_id
     * @return int
     */
    public function getBrokerId()
    {
        return $this->container['broker_id'];
    }

    /**
     * Sets broker_id
     * @param int $broker_id Hozzá tartozó üzletkötő azonosítója
     * @return $this
     */
    public function setBrokerId($broker_id)
    {
        $this->container['broker_id'] = $broker_id;

        return $this;
    }

    /**
     * Gets expire_date
     * @return \DateTime
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     * @param \DateTime $expire_date Biztosítás utolsó napja
     * @return $this
     */
    public function setExpireDate($expire_date)
    {
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets insurance_description
     * @return string
     */
    public function getInsuranceDescription()
    {
        return $this->container['insurance_description'];
    }

    /**
     * Sets insurance_description
     * @param string $insurance_description Biztosítás leírása, max hossz 128
     * @return $this
     */
    public function setInsuranceDescription($insurance_description)
    {
        $this->container['insurance_description'] = $insurance_description;

        return $this;
    }

    /**
     * Gets insurance_type
     * @return string
     */
    public function getInsuranceType()
    {
        return $this->container['insurance_type'];
    }

    /**
     * Sets insurance_type
     * @param string $insurance_type Biztosítás típusa, max hossz 48
     * @return $this
     */
    public function setInsuranceType($insurance_type)
    {
        $this->container['insurance_type'] = $insurance_type;

        return $this;
    }

    /**
     * Gets relevant_document_id
     * @return int
     */
    public function getRelevantDocumentId()
    {
        return $this->container['relevant_document_id'];
    }

    /**
     * Sets relevant_document_id
     * @param int $relevant_document_id Hozzá tartozó doksi
     * @return $this
     */
    public function setRelevantDocumentId($relevant_document_id)
    {
        $this->container['relevant_document_id'] = $relevant_document_id;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date Biztosítás első napja
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Sunday\ArchiveClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Sunday\ArchiveClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


