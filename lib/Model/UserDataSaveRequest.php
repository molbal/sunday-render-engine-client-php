<?php
/**
 * UserDataSaveRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sunday Archive Service
 *
 * Sunday Archive Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * UserDataSaveRequest Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserDataSaveRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UserDataSaveRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'birthday' => 'string',
        'birthplace' => 'string',
        'driver_license_number' => 'string',
        'first_name' => 'string',
        'home_address_id' => 'int',
        'mail_address_id' => 'int',
        'mothers_birth_name' => 'string',
        'personal_id_number' => 'string',
        'phone' => 'string',
        'sur_name' => 'string',
        'title' => 'string',
        'user_id' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'birthday' => 'birthday',
        'birthplace' => 'birthplace',
        'driver_license_number' => 'driverLicenseNumber',
        'first_name' => 'firstName',
        'home_address_id' => 'homeAddressId',
        'mail_address_id' => 'mailAddressId',
        'mothers_birth_name' => 'mothersBirthName',
        'personal_id_number' => 'personalIdNumber',
        'phone' => 'phone',
        'sur_name' => 'surName',
        'title' => 'title',
        'user_id' => 'userId'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'birthday' => 'setBirthday',
        'birthplace' => 'setBirthplace',
        'driver_license_number' => 'setDriverLicenseNumber',
        'first_name' => 'setFirstName',
        'home_address_id' => 'setHomeAddressId',
        'mail_address_id' => 'setMailAddressId',
        'mothers_birth_name' => 'setMothersBirthName',
        'personal_id_number' => 'setPersonalIdNumber',
        'phone' => 'setPhone',
        'sur_name' => 'setSurName',
        'title' => 'setTitle',
        'user_id' => 'setUserId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'birthday' => 'getBirthday',
        'birthplace' => 'getBirthplace',
        'driver_license_number' => 'getDriverLicenseNumber',
        'first_name' => 'getFirstName',
        'home_address_id' => 'getHomeAddressId',
        'mail_address_id' => 'getMailAddressId',
        'mothers_birth_name' => 'getMothersBirthName',
        'personal_id_number' => 'getPersonalIdNumber',
        'phone' => 'getPhone',
        'sur_name' => 'getSurName',
        'title' => 'getTitle',
        'user_id' => 'getUserId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['birthplace'] = isset($data['birthplace']) ? $data['birthplace'] : null;
        $this->container['driver_license_number'] = isset($data['driver_license_number']) ? $data['driver_license_number'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['home_address_id'] = isset($data['home_address_id']) ? $data['home_address_id'] : null;
        $this->container['mail_address_id'] = isset($data['mail_address_id']) ? $data['mail_address_id'] : null;
        $this->container['mothers_birth_name'] = isset($data['mothers_birth_name']) ? $data['mothers_birth_name'] : null;
        $this->container['personal_id_number'] = isset($data['personal_id_number']) ? $data['personal_id_number'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['sur_name'] = isset($data['sur_name']) ? $data['sur_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets birthday
     * @return string
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     * @param string $birthday Születésnap. Nem lehet null. yyyy-MM-dd formátum
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets birthplace
     * @return string
     */
    public function getBirthplace()
    {
        return $this->container['birthplace'];
    }

    /**
     * Sets birthplace
     * @param string $birthplace Születési hely. Max 64 karakter, nem lehet null
     * @return $this
     */
    public function setBirthplace($birthplace)
    {
        $this->container['birthplace'] = $birthplace;

        return $this;
    }

    /**
     * Gets driver_license_number
     * @return string
     */
    public function getDriverLicenseNumber()
    {
        return $this->container['driver_license_number'];
    }

    /**
     * Sets driver_license_number
     * @param string $driver_license_number Jogsi ig szám. Max 12 karakter, nem lehet null
     * @return $this
     */
    public function setDriverLicenseNumber($driver_license_number)
    {
        $this->container['driver_license_number'] = $driver_license_number;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name Keresztnév. Max 64 karakter, nem lehet null
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets home_address_id
     * @return int
     */
    public function getHomeAddressId()
    {
        return $this->container['home_address_id'];
    }

    /**
     * Sets home_address_id
     * @param int $home_address_id Lakcím azonosítója. Kötelező
     * @return $this
     */
    public function setHomeAddressId($home_address_id)
    {
        $this->container['home_address_id'] = $home_address_id;

        return $this;
    }

    /**
     * Gets mail_address_id
     * @return int
     */
    public function getMailAddressId()
    {
        return $this->container['mail_address_id'];
    }

    /**
     * Sets mail_address_id
     * @param int $mail_address_id Levelezési cím azonosítója. Opcionális
     * @return $this
     */
    public function setMailAddressId($mail_address_id)
    {
        $this->container['mail_address_id'] = $mail_address_id;

        return $this;
    }

    /**
     * Gets mothers_birth_name
     * @return string
     */
    public function getMothersBirthName()
    {
        return $this->container['mothers_birth_name'];
    }

    /**
     * Sets mothers_birth_name
     * @param string $mothers_birth_name Édesanyja születési neve. Max 64 karakter, nem lehet null
     * @return $this
     */
    public function setMothersBirthName($mothers_birth_name)
    {
        $this->container['mothers_birth_name'] = $mothers_birth_name;

        return $this;
    }

    /**
     * Gets personal_id_number
     * @return string
     */
    public function getPersonalIdNumber()
    {
        return $this->container['personal_id_number'];
    }

    /**
     * Sets personal_id_number
     * @param string $personal_id_number Személyi ig szám. Max 12 karakter, nem lehet null
     * @return $this
     */
    public function setPersonalIdNumber($personal_id_number)
    {
        $this->container['personal_id_number'] = $personal_id_number;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Telefonszám. Max 12 karakter, nem lehet null
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets sur_name
     * @return string
     */
    public function getSurName()
    {
        return $this->container['sur_name'];
    }

    /**
     * Sets sur_name
     * @param string $sur_name Vezetéknév. Max 64 karakter, nem lehet null
     * @return $this
     */
    public function setSurName($sur_name)
    {
        $this->container['sur_name'] = $sur_name;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Titulus. Max 12 karakter, lehet null
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id A felhasználó azonosítója
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


